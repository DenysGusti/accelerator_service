version: '3.8'


volumes:
  geoserver_volume:
    external: false
  mongodb_volume:
    external: false
  minio_data:
    external: false
  postgres_data:
    external: false
  rabbitmq_data:
    external: false
  rabbitmq_log:
    external: false

services:
  db:
    image: postgres:14
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=accelerator
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_DEFAULT_VHOST=accelerator-native-jobs
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - rabbitmq_data:/var/lib/rabbitmq
        - rabbitmq_log:/var/log/rabbitmq
  
  minio:
    image: minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
      - "${MINIO_DEV_CERT_LOCATION:?err}:/root/.minio/certs"
    env_file:
      - ./.env.minio

  web_be:
    build:
      context: "${PROJECT_FOLDER:?err}"
      dockerfile: Dockerfile.dev
    volumes:
      - "${PROJECT_FOLDER:?err}:/app/"
    ports:
      - 8000:8000
    env_file:
      - ./.env.web.be
    depends_on:
      - db
    
  web_fe:
    build:
      context: "${WEBCLI_PROJECT_FOLDER:?err}"
      dockerfile: Dockerfile.dev
    volumes:
      - "${WEBCLI_PROJECT_FOLDER:?err}:/app/"
    ports:
      - 8080:8080
    env_file:
      - ./.env.web.fe
    depends_on:
      - web_be  
  extract_netcdf: 
    build:
      context: "${EXTRACT_NETCDF_PROJECT_FOLDER:?err}"
      dockerfile: Dockerfile
    command: sleep infinity
    volumes:
      - "${EXTRACT_NETCDF_PROJECT_FOLDER:?err}:/app/"

  acli: 
    build:
      context: "${ACLI_PROJECT_FOLDER:?err}"
      dockerfile: Dockerfile.dev
    command: sleep infinity
    volumes:
      - "${ACLI_PROJECT_FOLDER:?err}:/app/"

  celery:
    build:
      context: "${CELERY_PROJECT_FOLDER:?err}"
      dockerfile: Dockerfile.dev
    
    env_file:
      - ./.env.celery
    volumes:
      - "${CELERY_PROJECT_FOLDER:?err}:/app/"
     
    depends_on:
      - web_be
      - rabbitmq

  image-builder-celery:
    build:
      context: "${CELERY_PROJECT_FOLDER:?err}"
      dockerfile: Dockerfile.image.builder.worker.dev

    privileged: true
    
    env_file:
      - ./.env.celery
    volumes:
      - "${CELERY_PROJECT_FOLDER:?err}:/home/nonroot/app/"
     
    depends_on:
      - web_be
      - rabbitmq
  # starbook: 
  #   build:
  #     context: "${STARBOOK_PROJECT_FOLDER:?err}"
  #     dockerfile: Dockerfile.dev
  #   command: sleep infinity
  #   volumes:
  #     - "${STARBOOK_PROJECT_FOLDER:?err}:/app/"

  wkubecmd: 
    build:
      context: "${WKUBECMD_WRAPPER_PROJECT_FOLDER:?err}"
      dockerfile: Dockerfile.dev
    environment:
      - GATEWAY_SERVER=http://web_be:8000/
      - JOB_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiSk9CIiwiY2FuX3JlZ2lzdGVyX3ZhbGlkYXRpb25fdHlwZXMiOltdLCJ1c2VyX2lkIjoxLCJqb2JfaWQiOjIzMCwiZXhwIjoxNzQ0MjU2NDExfQ.v7uqqZVxCSOG84Yt0bJQellqBFMzL9jTOry4q-7e76Q
    command: sleep infinity
    volumes:
      - "${WKUBECMD_WRAPPER_PROJECT_FOLDER:?err}:/app/"

  accms: 
    build:
      context: "${ACCMS_PROJECT_FOLDER:?err}"
      dockerfile: Dockerfile.dev
    ports:
      - 8001:8000
    volumes:
      - "${ACCMS_PROJECT_FOLDER:?err}:/app/"

  nginx:
    build: 
      context: ../devnginx
      dockerfile: Dockerfile.dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf.d/fe.nginx.conf:/etc/nginx/conf.d/fe.nginx.conf
      - ./nginx.conf.d/wagtail.nginx.conf:/etc/nginx/conf.d/wagtail.nginx.conf
    
    